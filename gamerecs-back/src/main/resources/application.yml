spring:
  application:
    name: gamerecs-back
  profiles:
    active: ${SPRING_PROFILES_ACTIVE}
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope:
              - email
              - profile
              - openid
            redirect-uri: ${GOOGLE_REDIRECT_URI:http://localhost:8080/login/oauth2/code/google}
            client-name: Google
            authorization-grant-type: authorization_code
        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/v2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://openidconnect.googleapis.com/v1/userinfo
            user-name-attribute: sub
            jwk-set-uri: https://www.googleapis.com/oauth2/v3/certs
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: validate
    show-sql: false
    open-in-view: false
    properties:
      hibernate:
        format_sql: false
        # Memory optimizations
        jdbc.batch_size: 25
        order_inserts: true
        order_updates: true
        generate_statistics: false
        # Disable aggressive lazy loading
        enable_lazy_load_no_trans: false
        # Cache settings
        cache:
          use_second_level_cache: false
          use_query_cache: false
        # Connection release mode
        connection.release_mode: after_transaction
        # Batch fetching
        default_batch_fetch_size: 25
  # Cache Configuration
  cache:
    type: caffeine
    caffeine:
      spec: maximumSize=1000,expireAfterWrite=60m
  flyway:
    enabled: true
    baseline-on-migrate: true
    locations: classpath:db/migration
    clean-disabled: true
    validate-on-migrate: true
  mail:
    host: ${SMTP_HOST:smtp.gmail.com}
    port: ${SMTP_PORT:465}
    username: ${SMTP_USERNAME}
    password: ${SMTP_PASSWORD}
    properties:
      mail:
        smtp:
          auth: true
          socketFactory:
            port: ${SMTP_PORT:465}
            class: javax.net.ssl.SSLSocketFactory
            fallback: false
          ssl:
            enable: true
            trust: ${SMTP_HOST:smtp.gmail.com}
          starttls:
            enable: false
            required: false
          from: ${SMTP_USERNAME:noreply@gamer-reco.com}

# Server Configuration
server:
  port: ${PORT:8080}
  tomcat:
    max-threads: 8
    min-spare-threads: 1
    max-connections: 20
    accept-count: 10
    connection-timeout: 2000
    max-swallow-size: 512KB
    max-http-form-post-size: 512KB
    # Additional memory optimizations
    max-http-header-size: 8KB
    processor-cache: 50
    background-processor-delay: 30

# CORS Configuration
allowed:
  origins: ${ALLOWED_ORIGINS:http://localhost:4200,http://localhost:8080,https://gamer-reco.com}

# SpringDoc OpenAPI Configuration
springdoc:
  api-docs:
    enabled: false
  swagger-ui:
    enabled: false

# Actuator Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,metrics,prometheus,caches
      base-path: /actuator
  endpoint:
    health:
      show-details: never
      group:
        readiness:
          include: db,diskSpace,ping
        liveness:
          include: ping
    metrics:
      enabled: true
    caches:
      enabled: true
  metrics:
    enable:
      jvm: true
      process: true
      system: true
      hikaricp: true
      tomcat: true
      cache: true
    distribution:
      percentiles-histogram:
        http.server.requests: true
      sla:
        http.server.requests: 100ms, 500ms
  health:
    mail:
      enabled: ${MANAGEMENT_HEALTH_MAIL_ENABLED:true}
    livenessState:
      enabled: true
    readinessState:
      enabled: true

# Application specific configuration
app:
  verification:
    base-url: ${VERIFICATION_BASE_URL:http://localhost:4200}
    token:
      expiration-hours: ${VERIFICATION_TOKEN_EXPIRATION_HOURS:24}
  jwt:
    secret: ${JWT_SECRET:600d76ab08678e8bee041f3f34e3f325b217f9872e148ef09ab4cd816a597d9e8ec8f534a8af24060e19dcbae5303219ef931b6fcdfe4db07e0de4f9764a1ad0cc2821e3d4f983e9ad09868941c596ce8c0f4af5b498fcec024509fc10c5322e1e8b3d0e72be001e35765407b824184ad9a57debc9e100d2fd960556d4c239ea5c232b8b6ef4cdcdc717a54f732cf29db30562e1bb71282d96addc503c221d86ec2cc9dbea613648a6df46d9a0a23d85561565b4e01f37f0b531e7b6680fcaf77c341bbeb6d1b19dd3156d057f0923e9e702941549e295da892a91dfa6343df7fac3c812dc8557bc1cb1b3f66698c9d8231e664ed66dc7636a0dc8eff3b5f429}
    expiration-ms: ${JWT_EXPIRATION_MS:86400000}
  oauth2:
    redirectUri: ${OAUTH2_REDIRECT_URI:http://localhost:4200/auth/google/callback}

# IGDB Configuration
igdb:
  client-id: ${IGDB_CLIENT_ID}
  access-token: ${IGDB_ACCESS_TOKEN}

# Cache Configuration
cache:
  igdb:
    ttl-minutes: 60
    max-size: 1000
