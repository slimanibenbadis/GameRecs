name: Backend CI/CD

on:
  push:
    branches: [ main, develop, 'feature-*' ]
    paths:
      - 'gamerecs-back/**'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'gamerecs-back/**'
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./gamerecs-back

    steps:
    - uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven

    - name: Build with Maven
      run: mvn -B package -DskipTests
      
    - name: Rename JAR file
      run: |
        mv target/*-0.0.1-SNAPSHOT.jar target/app.jar
        
    - name: Run Tests
      run: mvn -B test -Dspring.profiles.active=test

    - name: Cache SonarCloud packages
      uses: actions/cache@v3
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Run SonarCloud Analysis
      if: github.ref == 'refs/heads/main'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        mvn -B verify sonar:sonar \
        -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
        -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
        -Dsonar.host.url=https://sonarcloud.io \
        -Dsonar.token=${{ secrets.SONAR_TOKEN }} \
        -Dsonar.java.coveragePlugin=jacoco \
        -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
        -Dsonar.qualitygate.wait=true

    - name: Verify JAR file
      run: |
        echo "Verifying JAR file existence and size..."
        ls -la target/
        if [ ! -f target/app.jar ]; then
          echo "app.jar not found!"
          exit 1
        fi

    - name: Build and Push Docker Image
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
        docker build -t $DOCKER_USERNAME/gamerecs-back:${GITHUB_REF##*/} .
        docker push $DOCKER_USERNAME/gamerecs-back:${GITHUB_REF##*/}

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    defaults:
      run:
        working-directory: ./gamerecs-back

    steps:
    - uses: actions/checkout@v4

    - name: Install Heroku CLI
      run: |
        curl https://cli-assets.heroku.com/install.sh | sh

    - name: Log in to Heroku Container Registry
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      run: echo "$HEROKU_API_KEY" | docker login --username=_ --password-stdin registry.heroku.com

    - name: Set Heroku app name
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
          echo "APP_NAME=gamer-reco-api-staging" >> $GITHUB_ENV
        elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
          echo "APP_NAME=gamer-reco-api-prod" >> $GITHUB_ENV
        fi

    - name: Set Heroku stack to container
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      run: heroku stack:set container --app ${{ env.APP_NAME }}

    - name: Build and push to Heroku
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      run: |
        docker build -t registry.heroku.com/${{ env.APP_NAME }}/web .
        # Simple verification of image contents without running the app
        docker run --rm --entrypoint="" registry.heroku.com/${{ env.APP_NAME }}/web ls -la /app/app.jar
        docker push registry.heroku.com/${{ env.APP_NAME }}/web
        
    - name: Release to Heroku
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      run: |
        heroku container:release web --app ${{ env.APP_NAME }}
        
    - name: Verify Deployment
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      run: |
        echo "Waiting for deployment to complete..."
        sleep 15  # Give Heroku time to start the release
        # Check deployment status
        STATUS=$(heroku releases --app ${{ env.APP_NAME }} --num 1 --json | jq -r '.[0].status')
        if [ "$STATUS" != "succeeded" ]; then
          echo "Deployment failed. Latest release status: $STATUS"
          heroku logs --app ${{ env.APP_NAME }} --num 50
          exit 1
        fi
        echo "Deployment successful!"
